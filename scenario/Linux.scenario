[test111]
    def availableScenariosForDockerImage(container):
        import os
        import re
        import platform

        def osName():
            return platform.system().replace('"', '')
        
        def distName(osRelease):
            distName = None
            options = re.findall( r'.*=.*', osRelease)
            optionsMap = {}
            for option in options:
                nameValue  = option.split('=')
                optionsMap[nameValue[0]] = nameValue[1]

            if "NAME" in optionsMap:
                distName = optionsMap["NAME"].replace('"', '').replace(' ', '')
            return distName

        def distVersion(osRelease):
            distVersion = None
            options = re.findall( r'.*=.*', osRelease)
            optionsMap = {}
            for option in options:
                nameValue  = option.split('=')
                optionsMap[nameValue[0]] = nameValue[1]

            if "VERSION_ID" in optionsMap:
                distVersion = optionsMap["VERSION_ID"].replace('"', '').replace(' ', '')
            return distVersion

        import shlex
        import subprocess
        cmd = "sudo docker run %s cat /etc/os-release" % container
        result = subprocess.run(shlex.split(cmd), stdout=subprocess.PIPE)

        pathes = []
        ###
        path = osName()
        if distName(result.stdout.decode('utf-8')):
            path += '_' + distName(result.stdout.decode('utf-8')) + defaultScenarioNameEnding
        if distVersion(result.stdout.decode('utf-8')):
            path += '_' +  distVersion(result.stdout.decode('utf-8')) + defaultScenarioNameEnding
            pathes.append(path)

        ###
        path = osName()
        if distName(result.stdout.decode('utf-8')):
            path += '_' + distName(result.stdout.decode('utf-8')) + defaultScenarioNameEnding
            pathes.append(path)

        ###
        path = osName()
        path += defaultScenarioNameEnding
        pathes.append(path)

        return pathes

    container = "archlinux:latest"
    scenarios = availableScenariosForDockerImage(container)

    print(scenarios)

    # scenarios = ["Linux_Ubuntu_16.04.scenario", "Linux_AstraLinux(Smolensk)_1.6.scenario"]

    runTarget("install_deps", scenarios)

[test_helperA]
    print(param)
    runTarget("test_helperB::param=%s" % str(param).replace(' ',''))
    runShell("./scenarist.py run test_helperB::param=%s" % str(param).replace(' ',''))

[test_helperB]
    print(param)

[test]
    # проверка на числа
    runTarget("test_helperB:param=1")
    runTarget("test_helperB::param=12")
    runTarget("test_helperB::param=1.1")
    runTarget("test_helperB::param=12.1")
    runTarget("test_helperB::param=12.12")

    # проверка на строки
    runTarget("test_helperB::param=abc")
    runTarget("test_helperB::param=\"abc\"")
    runTarget('test_helperB::param=\'abc\'')
    runTarget("test_helperB::param=\'abc\'")
    runTarget("test_helperB::param='abc'")

    # проверка на массивы
    runTarget("test_helperA::param=[1]")
    runTarget("test_helperA::param=[12]")
    runTarget("test_helperA::param=[1.1]")
    runTarget("test_helperA::param=[12.12]")
    runTarget("test_helperA::param=[1,2]")
    runTarget("test_helperA::param=[1.1,2.1]")
    runTarget("test_helperA::param=[12,22]")
    runTarget("test_helperA::param=[12.1,22.1]")
    runTarget("test_helperA::param=[a]")
    runTarget("test_helperA::param=[a/b]")
    runTarget("test_helperA::param=[\"a\"]")
    runTarget("test_helperA::param=[\"a/b\"]")
    runTarget("test_helperA::param=[a,b]")
    runTarget("test_helperA::param=[a,b,1]")
    runTarget("test_helperA::param=[\"a\",\"b\"]")
    runTarget("test_helperA::param=[ab]")
    runTarget("test_helperA::param=[c:d]")
    runTarget("test_helperA::param=[\"ab\"]")
    runTarget("test_helperA::param=[\"c:d\"]")
    runTarget("test_helperA::param=[ab,ab]")
    runTarget("test_helperA::param=[\"ab\",\"ab\"]")
    runTarget("test_helperA::param=[\"ab\",\"ab\", 1]")
    runTarget("test_helperA::param=[\"ab\",\"ab\", 12]")
    runTarget("test_helperA::param=[\"ab\",\"ab\", 12.12]")

    # множественные параметры
    runTarget("test_helperB::param0=1,param=42")
    runTarget("test_helperB::param0=a,param=b")
    
    # множественные цели с параметрами
    runShell("./scenarist.py run test_helperB:param=1 test_helperB:param=42")

[default]
    try:
        if len(dockerImage) == 0: raise
    except: dockerImage="sogimu/astralinux:1.11"

    try: deploy
    except:
        deploy=False


    def splitDockerImageName(dockerImage):
        def extractNameAndTag(imageNameAndTag):
            imageName_tag = imageNameAndTag.split(":")
            if len(imageName_tag) == 2:
                return imageName_tag[0], imageName_tag[1]
            else:
                return imageName_tag[0], None

        dockerUser = None
        dockerImageName = None
        dockerImageTag = None

        user_imageNameAndTag = dockerImage.split("/")
        if len(user_imageNameAndTag) == 2:
            dockerUser = user_imageNameAndTag[0]
            dockerImageName, dockerImageTag = extractNameAndTag(user_imageNameAndTag[1])
        else:
            dockerImageName, dockerImageTag = extractNameAndTag(user_imageNameAndTag[0])

        return dockerUser, dockerImageName, dockerImageTag

    dockerUser, dockerImageName, dockerImageTag = splitDockerImageName(dockerImage)

    runTarget("in_container:container=\"%s\", targets=[\"build\"]" % (dockerImage))

    if deploy != False:
        runTarget("deploy_package:host=\"sogimu.fvds.ru\",folder=\"build_scenarst/\"")

[install_deps]
    print("Just LINUX!")
    # runShell("apt-get update")
    # runShell("apt-get install -y --allow-unauthenticated --no-install-recommends python-dev git ssh rsync")

[extract_version]
    version = subprocess.check_output(["git", "describe", "--abbrev=4", "--tags", "--always", "--dirty"])
    version = version.replace('\n', '')
    initFile = "build_scenarist/__init__.py"
    f = open(initFile, "r")
    fileText = f.read()
    f.close()

    f = open(initFile, "w")
    fileText = re.sub("__version__ = .+\n", "__version__ = \"%s\"\n" % version, fileText)
    f.seek(0)
    f.write(fileText)
    f.close()


[clean]
    if exists("./dist"):
        import shutil
        shutil.rmtree("./dist")

[make_package]
    runTarget("clean")
    runShell("python2 setup.py sdist bdist_wheel")
    with cd("dist"):
        runShell("bash -c 'ls *.tar.gz | xargs -I {} ln -s {} build_scenarist_latest.tar.gz'")

[build]
    runTarget("extract_version")
    runTarget("make_package")

[deploy_package]
    try: host
    except:
        raise Exception("Необходимо ввести имя хоста!")    

    try: folder
    except:
        raise Exception("Необходимо ввести путь к папке!")    

    runShell("""
    bash -ec
    '
        currentTag=$(git tag -l --points-at HEAD)
        if [ -z ${currentTag} ]; then
           echo "Нет git-тега. Я не буду выкладывать пакет в открытый доступ!";
        else
            echo "Git-тэг: "${currentTag}
            PUBLIC_ROOT=/var/lib/jenkins/public/
            PUBLIC_DIR_PATH=${PUBLIC_ROOT}%s
            echo "Путь к публичной папке: "${PUBLIC_DIR_PATH}
            ssh jenkins@%s mkdir -p ${PUBLIC_DIR_PATH}
            rsync dist/*.tar.gz jenkins@%s:${PUBLIC_DIR_PATH}
        fi
    '
    """ % (folder, host, host))

[in_container]
    try: container
    except:
        raise Exception("Необходимо ввести имя docker-контейнера!")

    try: 
        # Экранирует кавычки список целей на выполнение
        for i in range(0, len(targets)):
            targets[i] = str(targets[i]).replace("'", '\\"')
    except:
        raise Exception("Необходимо ввести список целей!")

    from os.path import expanduser
    homePath = expanduser("~")
    id_rsaPath = os.path.join(homePath, ".ssh/id_rsa")
    known_hostsPath = os.path.join(homePath, ".ssh/known_hosts")

    f=open("/etc/timezone","r")
    timezone = f.read()

    f=open("Dockerfile","w")
    f.write("""FROM %s
    ADD scenario/ /scenario/
    WORKDIR /  
    RUN apt-get update && \\
    apt-get install -y python wget sudo tzdata
    
    ENV TIMEZONE %s
    RUN echo $TIMEZONE > /etc/timezone && \\
        rm /etc/localtime && \\
        ln -snf /usr/share/zoneinfo/$TIMEZONE /etc/localtime && \\
        dpkg-reconfigure -f noninteractive tzdata

    RUN if grep -q users /etc/group; \\
    then \\
         echo "Group 'user' exist"; \\
    else \\
        groupadd -g 100 users; \\
    fi
    
    RUN if grep -q user /etc/passwd; \\
    then \\
        echo "User 'user' exist"; \\
    else \\
        useradd user --uid 1000 --gid 100 -m -s /bin/bash; \\
    fi

    RUN echo "user:12345678" | chpasswd && \\
    adduser user sudo && \\
    adduser root sudo && \\
    cd /tmp && \\
    wget https://bootstrap.pypa.io/get-pip.py && \\
    python get-pip.py --force-reinstall && \\
    cd / && \\
    pip install -U build_scenarist
    
    RUN scenarist.py run install_deps""" % (container, timezone) )
    f.close()

    runShell("sudo docker pull %s" % container)
    runShell("sudo docker build -t %s-pdp-dev ." % container)

    runShell("""
            sudo docker run -u 1000 --rm -v %s:/home/user/.ssh/id_rsa:ro -v %s:/home/user/.ssh/known_hosts:ro -v /etc/hosts:/etc/hosts:ro -v \"%s\":/repo %s-pdp-dev bash -cex '
                scenarist.py info
                cd /repo
                scenarist.py run %s
            '
        """ % (id_rsaPath, known_hostsPath, os.getcwd(), container, "  ".join(targets)))
