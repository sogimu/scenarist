[test_helperA]
    print(param)
    a = "test_helperB::param=%s" % str(param)
    # b = "b::param=[\"a\"]"
    print(a)
    runTarget(a)
    # runShell('./scenarist.py run b::param=%s' % str(param))
[test_helperB]
    print(param)

[test]
    # проверка на числа
    runTarget("test_helperB:param=1")
    runTarget("test_helperB::param=12")
    runTarget("test_helperB::param=1.1")
    runTarget("test_helperB::param=12.1")
    runTarget("test_helperB::param=12.12")

    # проверка на строки
    runTarget("test_helperB::param=abc")
    # runTarget("test_helperB::param=\"abc\"")
    # runTarget('test_helperB::param=\'abc\'')
    # runTarget("test_helperB::param=\'abc\'")
    # runTarget("test_helperB::param='abc'")

    # проверка на массивы
    runTarget("test_helperB::param=[1]")
    runTarget("test_helperB::param=[12]")
    runTarget("test_helperB::param=[1.1]")
    runTarget("test_helperB::param=[12.12]")
    runTarget("test_helperB::param=[1,2]")
    runTarget("test_helperB::param=[1.1,2.1]")
    runTarget("test_helperB::param=[12,22]")
    runTarget("test_helperB::param=[12.1,22.1]")
    runTarget("test_helperB::param=[a]")
    runTarget("test_helperB::param=[\"a\"]")
    runTarget("test_helperB::param=[a,b]")
    runTarget("test_helperB::param=[a,b,1]")
    runTarget("test_helperB::param=[\"a\",\"b\"]")
    runTarget("test_helperB::param=[ab]")
    runTarget("test_helperB::param=[\"ab\"]")
    runTarget("test_helperB::param=[ab,ab]")
    runTarget("test_helperB::param=[\"ab\",\"ab\"]")
    runTarget("test_helperB::param=[\"ab\",\"ab\", 1]")
    runTarget("test_helperB::param=[\"ab\",\"ab\", 12]")
    runTarget("test_helperB::param=[\"ab\",\"ab\", 12.12]")

[default]
    try:
        if len(imageName) == 0: raise
    except: imageName="sogimu/astralinux"

    try:
        if len(imageTag) == 0: raise
    except: imageTag="1.11"

    try: deploy
    except:
        deploy=False

    runTarget("in_container:container=\"%s:%s\", targets=[\"install_deps\", \"build\"]" % (imageName, imageTag))

    if deploy != False:
        runTarget("deploy_package:host=\"sogimu.fvds.ru\",folder=\"build_scenarst/\"")

[install_deps]
    runShell("apt-get update")
    runShell("apt-get install -y python-dev")

[extract_version]
    version = subprocess.check_output(["git", "describe", "--abbrev=4", "--tags", "--always", "--dirty"])
    version = version.replace('\n', '')
    initFile = "build_scenarist/__init__.py"
    f = open(initFile, "r")
    fileText = f.read()
    f.close()

    f = open(initFile, "w")
    fileText = re.sub("__version__ = .+\n", "__version__ = \"%s\"\n" % version, fileText)
    f.seek(0)
    f.write(fileText)
    f.close()

[make_package]
    runShell("sudo rm -rf dist")
    runShell("python2 setup.py sdist")
    with cd("dist"):
        runShell("bash -c 'ls | xargs -I {} ln -s {} build_scenarist_latest.tar.gz'")

[build]
    runTarget("extract_version")
    runTarget("make_package")

[deploy_package]
    try: host
    except:
        raise Exception("Необходимо ввести имя хоста!")    

    try: folder
    except:
        raise Exception("Необходимо ввести путь к папке!")    

    runShell("""
    bash -ec
    '
        currentTag=$(git tag -l --points-at HEAD)
        if [ -z ${currentTag} ]; then
           echo "Нет git-тега. Я не буду выкладывать пакет в открытый доступ!";
        else
            echo "Git-тэг: "${currentTag}
            PUBLIC_ROOT=/var/lib/jenkins/public/
            PUBLIC_DIR_PATH=${PUBLIC_ROOT}%s
            echo "Путь к публичной папке: "${PUBLIC_DIR_PATH}
            ssh jenkins@%s mkdir -p ${PUBLIC_DIR_PATH}
            rsync dist/*.tar.gz jenkins@%s:${PUBLIC_DIR_PATH}
        fi
    '
    """ % (folder, host, host))

[in_container]
    try: container
    except:
        raise Exception("Необходимо ввести имя docker-контейнера!")

    try: targets
    except:
        raise Exception("Необходимо ввести список целей!")

    runShell("""
        sudo docker run -v %s:/repo %s bash -cex '
            pip install -U build_scenarist
            cd /repo
            scenarist.py info
            scenarist.py run %s
        '
        """ % (os.getcwd(), container, "  ".join(targets)))
